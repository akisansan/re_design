'use strict';

Object.defineProperty(exports, '__esModule', {
  value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _keyStringMap = require('./key-string-map');

var _keyStringMap2 = _interopRequireDefault(_keyStringMap);

var KeyStringDetector = (function () {
  function KeyStringDetector() {
    _classCallCheck(this, KeyStringDetector);
  }

  _createClass(KeyStringDetector, [{
    key: 'detect',

    /**
     * @param {KeyboardEvent} event
     * @return {String}
     */
    value: function detect(event) {
      var keyString = '';
      if (event.shiftKey) {
        keyString = 'Shift+' + keyString;
      }
      if (event.ctrlKey) {
        keyString = 'Ctrl+' + keyString;
      }
      if (event.altKey) {
        keyString = 'Alt+' + keyString;
      }
      if (event.metaKey) {
        keyString = 'Meta+' + keyString;
      }
      keyString += _keyStringMap2['default'][event.keyCode] || 'Unknown';
      return keyString;
    }
  }]);

  return KeyStringDetector;
})();

exports['default'] = KeyStringDetector;
module.exports = exports['default'];